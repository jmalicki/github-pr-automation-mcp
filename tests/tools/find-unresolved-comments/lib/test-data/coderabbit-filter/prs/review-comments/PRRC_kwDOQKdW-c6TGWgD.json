{
  "data": {
    "node": {
      "author": {
        "login": "coderabbitai"
      },
      "body": "_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Hard-coded tool list creates duplication and sync risk.**\n\nThe List command now outputs a static, hard-coded list of tool names and descriptions. This duplicates the tool definitions in `src/doc_generator.rs` (lines 10-55) and the actual tool implementations in `src/lib.rs` (lines 180-208). When tools are added, removed, or descriptions change, all three locations must be manually updated.\n\nConsider dynamically retrieving this information from a single source of truth (e.g., `DocGenerator::generate_tools_documentation()` or directly from the tool definitions) to eliminate duplication.\n\n\n\nApply this diff to use the existing documentation generator:\n\n```diff\n     Commands::List => {\n         println!(\"📋 Current tool definitions:\");\n-        println!(\"Available tools:\");\n-        println!(\"  - spawn_subagent: Spawn a new subagent with a git worktree for isolated development\");\n-        println!(\"  - cleanup_worktree: Clean up a worktree and optionally delete the branch (destructive)\");\n-        println!(\"  - list_worktrees: List all git worktrees and their associated agents\");\n-        println!(\"\\nUse 'cargo run --bin doc-gen report' to generate detailed schema documentation.\");\n+        let docs = DocGenerator::generate_tools_documentation();\n+        println!(\"{}\", docs);\n     }\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn src/bin/doc-gen.rs around lines 87 to 94, the List branch prints a hard-coded\ntool list which duplicates definitions in src/doc_generator.rs and src/lib.rs;\nreplace the static printout by invoking the existing documentation generator to\nproduce the up-to-date tool list. Specifically, call the function (e.g.,\nDocGenerator::generate_tools_documentation() or the appropriate public helper)\nto obtain the tools summary/text, and print that result instead of the\nhard-coded strings; ensure you only request the concise tool list/view (not the\nfull report) or trim the generated output to match the previous List behavior,\nand handle any errors from the generator by logging a sensible message and\nexiting non-zero if generation fails.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
      "createdAt": "2025-10-28T05:01:02Z",
      "databaseId": 2467915779,
      "diffHunk": "@@ -72,47 +70,29 @@ async fn main() -> Result<()> {\n         Commands::Validate => {\n             println!(\"🔍 Validating documentation against implementation...\");\n             \n-            let generator = DocGenerator::new();\n-            generator.validate_implementation()?;\n+            DocGenerator::validate_docs()?;\n             \n             println!(\"✅ All documentation is valid!\");\n         }\n         \n         Commands::Report { output } => {\n             println!(\"📊 Generating schema report...\");\n             \n-            let generator = DocGenerator::new();\n-            let report_content = generator.generate_schema_report();\n+            let report_content = DocGenerator::generate_tools_documentation();\n             \n             std::fs::write(&output, report_content)?;\n             println!(\"✅ Schema report generated: {}\", output);\n         }\n         \n         Commands::List => {\n             println!(\"📋 Current tool definitions:\");\n-            \n-            let generator = DocGenerator::new();\n-            \n-            for tool in &generator.tools {\n-                println!(\"\\n🔧 {}\", tool.name);\n-                println!(\"   Description: {}\", tool.description);\n-                println!(\"   Destructive: {}\", tool.is_destructive);\n-                println!(\"   Parameters: {} total\", tool.parameters.len());\n-                \n-                for param in &tool.parameters {\n-                    let required = if param.required { \"required\" } else { \"optional\" };\n-                    println!(\"     - {}: {} ({})\", param.name, required, param.param_type);\n-                }\n-                \n-                if !tool.warnings.is_empty() {\n-                    println!(\"   Warnings:\");\n-                    for warning in &tool.warnings {\n-                        println!(\"     - {}\", warning);\n-                    }\n-                }\n-            }\n+            println!(\"Available tools:\");\n+            println!(\"  - spawn_subagent: Spawn a new subagent with a git worktree for isolated development\");\n+            println!(\"  - cleanup_worktree: Clean up a worktree and optionally delete the branch (destructive)\");\n+            println!(\"  - list_worktrees: List all git worktrees and their associated agents\");\n+            println!(\"\\nUse 'cargo run --bin doc-gen report' to generate detailed schema documentation.\");\n         }",
      "id": "PRRC_kwDOQKdW-c6TGWgD",
      "originalPosition": 79,
      "path": "src/bin/doc-gen.rs",
      "pullRequestReview": {
        "databaseId": 3386631280,
        "id": "PRR_kwDOQKdW-c7J2-Rw"
      },
      "updatedAt": "2025-10-28T05:01:04Z"
    }
  }
}
