{
  "data": {
    "node": {
      "author": {
        "login": "coderabbitai"
      },
      "body": "<!-- This is an auto-generated comment: summarize by coderabbit.ai -->\n<!-- This is an auto-generated comment: rate limited by coderabbit.ai -->\n\n> [!WARNING]\n> ## Rate limit exceeded\n> \n> @jmalicki has exceeded the limit for the number of commits or files that can be reviewed per hour. Please wait **17 minutes and 37 seconds** before requesting another review.\n> \n> <details>\n> <summary>⌛ How to resolve this issue?</summary>\n> \n> After the wait time has elapsed, a review can be triggered using the `@coderabbitai review` command as a PR comment. Alternatively, push new commits to this PR.\n> \n> We recommend that you space out your commits to avoid hitting the rate limit.\n> \n> </details>\n> \n> \n> <details>\n> <summary>🚦 How do rate limits work?</summary>\n> \n> CodeRabbit enforces hourly rate limits for each developer per organization.\n> \n> Our paid plans have higher rate limits than the trial, open-source and free plans. In all cases, we re-allow further reviews after a brief timeout.\n> \n> Please see our [FAQ](https://docs.coderabbit.ai/faq) for further information.\n> \n> </details>\n> \n> <details>\n> <summary>📥 Commits</summary>\n> \n> Reviewing files that changed from the base of the PR and between 5a9b1e846c07c951fc7b414d44638169519c0438 and 15b8c7cb661e452d2e94232bfa110465e71cb0bf.\n> \n> </details>\n> \n> <details>\n> <summary>📒 Files selected for processing (13)</summary>\n> \n> * `Cargo.toml` (2 hunks)\n> * `src/agent_monitor.rs` (7 hunks)\n> * `src/bin/doc-gen.rs` (2 hunks)\n> * `src/doc_generator.rs` (1 hunks)\n> * `src/git_operations.rs` (11 hunks)\n> * `src/lib.rs` (1 hunks)\n> * `src/main.rs` (1 hunks)\n> * `src/subagent_spawner.rs` (11 hunks)\n> * `tests/agent_monitor_tests.rs` (2 hunks)\n> * `tests/documentation_tests.rs` (7 hunks)\n> * `tests/git_operations_tests.rs` (2 hunks)\n> * `tests/integration_tests.rs` (1 hunks)\n> * `tests/subagent_spawner_tests.rs` (2 hunks)\n> \n> </details>\n\n<!-- end of auto-generated comment: rate limited by coderabbit.ai -->\n\n<!-- walkthrough_start -->\n\n## Walkthrough\n\nThis PR refactors the MCP server architecture by migrating core logic from `main.rs` to `lib.rs`, replacing the MCP dependency with official rmcp packages, restructuring public APIs (SubagentConfig, CleanupConfig, AgentOptions), and updating documentation generation with hard-coded tool definitions. Dependencies are updated to include schemars and futures; the main entry point is simplified to delegate to a new `run_server()` function.\n\n## Changes\n\n| Cohort / File(s) | Summary |\n|---|---|\n| **Dependency Updates** <br> `Cargo.toml` | Replaced `mcp` with `rmcp`, added `rmcp-macros`, `schemars`, and `futures` dependencies. Removed `sopht` reference. |\n| **Server Architecture Refactoring** <br> `src/lib.rs`, `src/main.rs` | Moved SubagentWorktreeServer implementation and tool routing from main.rs to lib.rs; main.rs now delegates to `run_server()`. Added public config structs (SubagentConfig, CleanupConfig, ListWorktreesConfig) and #[tool_router] impl. |\n| **Documentation Generation** <br> `src/doc_generator.rs`, `src/bin/doc-gen.rs` | Replaced dynamic tool retrieval with hard-coded tool list; removed per-tool generator function; added `validate_docs()` and `run_doc_generator()` methods; converted doc-gen CLI to use associated functions. |\n| **Data Structure Updates** <br> `src/subagent_spawner.rs`, `tests/agent_monitor_tests.rs` | Added JsonSchema derive to AgentOptions; changed custom_options field from IndexMap to HashMap; added CPU/memory fields to AgentProcessInfo; renamed and restructured AgentSummary fields. |\n| **Minor Cleanup** <br> `src/agent_monitor.rs`, `src/git_operations.rs` | Removed unused std::io::Read import; renamed unused bindings (worktree_path → _worktree_path, branch_ref → _branch_ref) to suppress warnings. |\n| **Test Refactoring** <br> `tests/*_tests.rs` | Updated all test files to match new public API signatures: SubagentConfig, CleanupConfig, AgentOptions; replaced CursorCliOptions with AgentOptions; updated SubagentSpawner::new() to return Result; renamed methods (get_cursor_cli_info → list_available_agents); added #[ignore] annotations to flaky tests. |\n\n## Sequence Diagram(s)\n\n```mermaid\nsequenceDiagram\n    autonumber\n    participant main as main.rs<br/>(Entry)\n    participant lib as lib.rs<br/>(run_server)\n    participant srvr as SubagentWorktree<br/>Server\n    participant mcp as MCP Server\n    participant user as Client\n\n    main->>lib: run_server().await\n    lib->>srvr: SubagentWorktreeServer::new()\n    srvr->>lib: Returns initialized server\n    lib->>mcp: Initialize MCP server\n    mcp->>lib: Ready (tools registered)\n    lib->>user: Listen for RPC calls\n    user->>mcp: spawn_subagent / cleanup_worktree / list_worktrees\n    mcp->>srvr: Route to #[tool_router] impl\n    srvr->>srvr: handle_spawn_subagent / handle_cleanup_worktree / handle_list_worktrees\n    srvr->>user: Return Result<String>\n```\n\n## Estimated code review effort\n\n🎯 4 (Complex) | ⏱️ ~60 minutes\n\n- **Architecture migration**: Server logic moved from main.rs to lib.rs with new SubagentWorktreeServer and tool routing—requires understanding the new control flow and rmcp integration.\n- **API surface changes**: Multiple public struct signatures altered (SubagentConfig, CleanupConfig, AgentOptions, AgentSummary) with field renames, type changes (IndexMap → HashMap), and new derives—each test file must be verified independently for correctness.\n- **Documentation generation rewrite**: Hard-coded tool list replaces dynamic generation; generate_tool_documentation removed—verify the new static approach covers all required tools.\n- **Async Result propagation**: SubagentSpawner::new() now returns Result, affecting error handling across multiple test files and call sites.\n- **Agent naming change**: CursorCliOptions → AgentOptions; cursor-cli → cursor-agent throughout; verify consistency across all tests.\n\n**Areas requiring extra attention:**\n- Integration between rmcp tool_router and new handler methods (spawn_subagent, cleanup_worktree, list_worktrees)\n- Field renamings in AgentSummary (waiting_agents → waiting_for_input, our_agents → spawned_by_us) and removal of worktree_distribution\n- Hard-coded tool list in doc_generator—ensure all required tools and parameters are present\n- Test flakiness annotations (#[ignore]) and their justification\n\n## Poem\n\n> 🐰 *A rabbit's ode to refactoring*\n>\n> The server hops from main to lib with grace,  \n> Tool routers dance through structured space,  \n> Configuration structs in schemas aligned,  \n> Hard-coded tools leave chaos behind,  \n> With rmcp official, we bound and leap—  \n> Clean architecture, memory so deep! ✨\n\n<!-- walkthrough_end -->\n\n<!-- pre_merge_checks_walkthrough_start -->\n\n## Pre-merge checks and finishing touches\n<details>\n<summary>✅ Passed checks (3 passed)</summary>\n\n|     Check name     | Status   | Explanation|\n| :----------------: | :------- ||\n|  Description Check | ✅ Passed | Check skipped - CodeRabbit’s high-level summary is enabled|\n|     Title Check    | ✅ Passed | The pull request title \"feat: Implement rmcp macros for MCP server\" directly addresses the primary architectural change in the changeset: migrating from a manual MCP server implementation to using the official rmcp macros for automatic tool registration and server lifecycle management. The core changes across src/lib.rs, Cargo.toml (adding rmcp and rmcp-macros dependencies), and src/main.rs all center on implementing and adopting the tool_router and related macros. The title is specific and clear enough that developers scanning history would immediately understand the significant refactoring involved. While the changeset also includes secondary work like documentation refactoring and test updates, it is expected that the title focus on the main architectural improvement rather than covering all details. |\n| Docstring Coverage | ✅ Passed | Docstring coverage is 95.52% which is sufficient. The required threshold is|\n\n</details>\n\n<!-- pre_merge_checks_walkthrough_end -->\n\n<!-- tips_start -->\n\n---\n\n\n\n<sub>Comment `@coderabbitai help` to get the list of available commands and usage tips.</sub>\n\n<!-- tips_end -->\n\n<!-- internal state start -->\n\n\n<!--  -->\n\n<!-- internal state end -->",
      "createdAt": "2025-10-28T04:28:49Z",
      "id": "IC_kwDOQKdW-c7N53Vf",
      "updatedAt": "2025-10-28T05:14:27Z"
    }
  }
}
